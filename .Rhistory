plot(meuse.pol, add = T)
title("Sample locations")
layout(matrix(c(1,2),1,2))
plot(meuse.pol, axes = TRUE)
plot(meuse.pol, axes = FALSE)
axis(1, at = c(178000 + 0:2 * 2000), cex.axis=0.7)
axis(2, at = c(326000 + 0:3 * 4000), cex.axis=0.7)
box()
oldpar <- par(no.readonly = TRUE)
layout(matrix(c(1,2),1,2))
plot(meuse, axes = TRUE, cex = 0.6)
oldpar <- par(no.readonly = TRUE)
layout(matrix(c(1,2),1,2))
plot(meuse, axes = TRUE, cex = 0.6)
plot(meuse.pol, add = T)
title("Sample locations")
par(mar = c(0,0,0,0) + 0.1)
plot(meuse, axes = FALSE, cex = 0.6)
plot(meuse.pol, add = T)
box()
par(oldpar)
plot(meuse)
plot(meuse.pol, add = T)
plot(meuse)
par(mfrow=c(1,1))
plot(meuse)
plot(meuse.pol, add = T)
plot(meuse)
SpatialPolygonsRescale(layout.scale.bar(),
offset = locator(1),
scale = 1000,
fill = c("transparent", "black"),
plot.grid = F)
text(locator(1),"0")
text(locator(1),"1 km")
SpatialPolygonsRescale(layout.north.arrow(),
offset=locator(1),
scale=400,
plot.grid=FALSE)
par(oldpar)
plot(meuse)
plot(meuse.pol, add = T)
layout(matrix(c(1,2),1,2))
plot(meuse.pol, axes = TRUE)
plot(meuse.pol, axes = FALSE)
axis(1, at = c(178000 + 0:2 * 2000), cex.axis=0.7)
axis(2, at = c(326000 + 0:3 * 4000), cex.axis=0.7)
box()
oldpar <- par(no.readonly = TRUE)
layout(matrix(c(1,2),1,2))
layout(matrix(c(1,2),1,2))
layout(matrix(c(1,2),1,2))
plot(meuse.pol, axes = TRUE)
plot(meuse.pol, axes = FALSE)
axis(1, at = c(178000 + 0:2 * 2000), cex.axis=0.7)
axis(2, at = c(326000 + 0:3 * 4000), cex.axis=0.7)
box()
oldpar <- par(no.readonly = TRUE)
layout(matrix(c(1,2),1,2))
plot(meuse, axes = TRUE, cex = 0.6)
plot(meuse.pol, add = T)
title("Sample locations")
par(mar = c(0,0,0,0) + 0.1)
plot(meuse, axes = FALSE, cex = 0.6)
plot(meuse.pol, add = T)
box()
par(oldpar)
plot(meuse)
plot(meuse.pol, add = T)
plot(meuse)
SpatialPolygonsRescale(layout.scale.bar(),
offset = locator(1),
scale = 1000,
fill = c("transparent", "black"),
plot.grid = F)
text(locator(1),"0")
text(locator(1),"1 km")
SpatialPolygonsRescale(layout.north.arrow(),
offset=locator(1),
scale=400,
plot.grid=FALSE)
par(mfrow=c(1,1))
plot(meuse)
par(mfrow=c(1,1))
plot(meuse.pol, add = T)
plot(meuse)
SpatialPolygonsRescale(layout.scale.bar(),
offset = locator(1),
scale = 1000,
fill = c("transparent", "black"),
plot.grid = F)
text(locator(1),"0")
text(locator(1),"1 km")
SpatialPolygonsRescale(layout.north.arrow(),
offset=locator(1),
scale=400,
plot.grid=FALSE)
library(maptools)
library(maps)
wrld <- map("world", interior = FALSE, xlim = c(-179, 179), ylim=c(-89, 89), plot = FALSE)
wrld_p >= pruneMap(wrld, xlim = c(-179, 179))
wrld_p <- pruneMap(wrld, xlim = c(-179, 179))
llCRS <- CRS("+proj=longlat + ellpsWGS84")
wrld_sp <- map2SpatialLines(wrld_p, proj4string=llCRS)
prj_new <- CRS("+proj=moll")
library(rgdal)
wrld_proj <- spTransform(wrld_sp, prj_new)
wrld_grid <- gridLines(wrld_sp, easts = c(-179, seq(-150, 150, 50), 179.5), norths = seq(-75, 75, 15), ndiscr = 100)
wrld_grid <- gridlines(wrld_sp, easts = c(-179, seq(-150, 150, 50), 179.5), norths = seq(-75, 75, 15), ndiscr = 100)
wrld_grid_proj <- spTransform(wrld_grd, prj_new)
wrld_grid_proj <- spTransform(wrld_grid, prj_new)
at_sp <- gridat(wrld_sp, easts = 0, norths = seq(-75, 75, 15), offset = 0.3)
at_proj <- spTransform(at_sp, prj_new)
plot(wrld_proj, col="grey60")
plot(wrld_grd_proj, add = T, lty = 3, col="grey70")
plot(wrld_grid_proj, add = T, lty = 3, col="grey70")
text(coordinates(at_proj), pos = at_proj$pos, offset = at_proj$offset, labels = parse(text=as.character(at_proj$labels)), cex=0.6)
par("pin")
par(pin = c(4,4))
par("pin") ## total size of figure
dev.off() ## turn off plotting
windows(width=10, height = 10)
pdf("file.pdf", width = 5, height = 7)
pin <- par("pin")
dxy <- apply(bbox(meuse), 1, diff)
ratio <- dxy[1]/dxy[2]
par(pin=c(ratio*pin[2],pin[2]), xaxs = "i", yaxs = "i")
plot(meuse, pch = 1)
box()
pin <- par("pin")
dxy <- apply(bbox(meuse), 1, diff)
ratio <- dxy[1]/dxy[2]
par(pin=c(ratio*pin[2],pin[2]), xaxs = "i", yaxs = "i")
plot(meuse, pch = 1)
box()
dev.() ## turn off plotting
dev.on() ## turn off plotting
wrld <- map("world",
interior = FALSE,
xlim = c(-179, 179),
ylim=c(-89, 89),
plot = FALSE)
wrld_p <- pruneMap(wrld, xlim = c(-179, 179))
llCRS <- CRS("+proj=longlat + ellpsWGS84")
wrld_sp <- map2SpatialLines(wrld_p, proj4string=llCRS)
prj_new <- CRS("+proj=moll")
library(rgdal)
wrld_proj <- spTransform(wrld_sp, prj_new)
wrld_grid <- gridlines(wrld_sp, easts = c(-179, seq(-150, 150, 50), 179.5), norths = seq(-75, 75, 15), ndiscr = 100)
wrld_grid_proj <- spTransform(wrld_grid, prj_new)
at_sp <- gridat(wrld_sp, easts = 0, norths = seq(-75, 75, 15), offset = 0.3)
at_proj <- spTransform(at_sp, prj_new)
plot(wrld_proj, col="grey60")
plot(wrld_grid_proj, add = T, lty = 3, col="grey70")
text(coordinates(at_proj), pos = at_proj$pos, offset = at_proj$offset, labels = parse(text=as.character(at_proj$labels)), cex=0.6)
windows(width=10, height = 10) ## X11() <- unix; quartz() <- mac
pin <- par("pin")
dxy <- apply(bbox(meuse), 1, diff)
ratio <- dxy[1]/dxy[2]
par(pin=c(ratio*pin[2],pin[2]), xaxs = "i", yaxs = "i")
plot(meuse, pch = 1)
box()
pin <- par("pin")
dxy <- apply(bbox(meuse), 1, diff)
ratio <- dxy[1]/dxy[2]
par(pin=c(ratio*pin[2],pin[2]), xaxs = "i", yaxs = "i")
plot(meuse, pch = 1)
box()
## applied-spatial-analysis.R
##
ASDAR_BOOK <- "http://www.asdar-book.org/book2ed"
chapters <- c("hello", "cm", "vis", "die", "cm2",
"std", "sppa", "geos", "lat", "dismap")
# setwd() # move to download folder
for (i in chapters) {
fn <- paste(i, "mod.R", sep="_")
download.file(paste(ASDAR_BOOK, fn, sep = "/"), fn)
}
list.files()
## 2.3 Spatial Objects
library(sp)
## eastings before northings
getClass("Spatial") ## 2 slots: bbox and proj4string
getClass("CRS") ## Coordinate Refence System
(m <- matrix(c(0,0,1,1), ncol = 2, dimnames=list(NULL, c("min", "max"))))
(crs <- CRS(projargs = as.character(NA)))
(S <- Spatial(bbox = m, proj4string = crs))
bb <- matrix(c(350,85,370,95), ncol = 2, dimnames=list(NULL, c("min","max")))
Spatial(bbox = bb, proj4string = CRS("+proj=longlat"))
## 2.4 SpatialPoints
CRAN_df <- read.table("ch2/CRAN051001a.txt", header = TRUE)
CRAN_mat <- cbind(CRAN_df$long, CRAN_df$lat)
row.names(CRAN_mat) <- 1:nrow(CRAN_mat)
(CRAN_mat)
getClass("SpatialPoints")
llCRS <- CRS("+proj=longlat +ellps=WGS84")
CRAN_sp <- SpatialPoints(CRAN_mat, proj4string = llCRS)
summary(CRAN_sp)
## 2.4.1 Methods
bbox(CRAN_sp)
proj4string(CRAN_sp)
proj4string(CRAN_sp) <- CRS(as.character(NA))
proj4string(CRAN_sp) <- llCRS
(brazil <- which(CRAN_df$loc=="Brazil"))
coordinates(CRAN_sp)[brazil,]
## 2.4.2 Data Frames for Spatial Point Data
str(row.names(CRAN_df))
CRAN_spdf1 <- SpatialPointsDataFrame(coords = CRAN_mat,
data = CRAN_df,
proj4string = llCRS,
match.ID = TRUE)
CRAN_spdf1[4,]
str(CRAN_spdf1$loc)
str(CRAN_spdf1[["loc"]])
s <- sample(nrow(CRAN_df))
CRAN_spdf2 <- SpatialPointsDataFrame(CRAN_mat,
CRAN_df[s,],
proj4string = llCRS,
match.ID = TRUE)
CRAN_spdf1[4,]
CRAN_spdf2[4,]
getClass("SpatialPointsDataFrame")
## generic methods like names, str work as expected for data.frame objects
names(CRAN_spdf1)
names(CRAN_spdf1@data)
## alt approaches to construction SpatialPointsDataFrames
CRAN_spdf4 <- SpatialPointsDataFrame(CRAN_sp, CRAN_df)
all.equal(CRAN_spdf4, CRAN_spdf2)
CRAN_df0 <- CRAN_df
coordinates(CRAN_df0) <- CRAN_mat
proj4string(CRAN_df0) <- llCRS
all.equal(CRAN_df0, CRAN_spdf2)
turtle_df <- read.csv("ch2/seamap105_mod.csv")
summary(turtle_df)
head(turtle_df)
timestamp <- as.POSIXlt(strptime(as.character(turtle_df$obs_date), "%m/%d/%Y %H:%M:%S"),"GMT")
turtle_df1 <- data.frame(turtle_df, timestamp = timestamp)
head(turtle_df1)
turtle_df1$lon <- ifelse(turtle_df1$lon < 0, turtle_df1$lon + 360, turtle_df1$lon)
turtle_sp <- turtle_df1[order(turtle_df1$timestamp),]
coordinates(turtle_sp) <- c("lon", "lat")
proj4string(turtle_sp) <- CRS("+proj=longlat +ellps=WGS84")
## 2.5 SpatialLines
getClass("Line")
getClass("Lines")
getClass("SpatialLines")
library("maps")
japan <- map("world", "japan", plot = FALSE)
p4s <- CRS("+proj=longlat +ellps=WGS84")
library(maptools)
SLjapan <- map2SpatialLines(japan, proj4string = p4s)
str(SLjapan, max.level = 2)
Lines_len <- sapply(slot(SLjapan, "lines"), function(x) length(slot(x,"Lines")))
table(Lines_len)
volcano_s1 <- ContourLines2SLDF(contourLines(volcano))
t(slot(volcano_s1, "data"))
llCRS <- CRS("+proj=longlat +ellps=WGS84")
auck_shore <- MapGen2SL("ch2/auckland_mapgen.dat", llCRS)
summary(auck_shore)
## 2.6 SpatialPolygons
lns <- slot(auck_shore, "lines")
table(sapply(lns, function(x) length(slot(x,"Lines"))))
islands_auck <- sapply(lns, function(x){
crds <- slot(slot(x,"Lines")[[1]], "coords")
identical(crds[1,],crds[nrow(crds),])
})
table(islands_auck)
getClass("Polygon")
getClass("Polygons")
getClass("SpatialPolygons")
## 2.6.1 SpatialPolygonsDataFrame
library(maps)
library(maptools)
state.map <- map("state", plot = FALSE, fill = TRUE)
IDs <- sapply(strsplit(state.map$names, ":"), function(x) x[1])
state.sp <- map2SpatialPolygons(state.map, IDs = IDs, proj4string = CRS("+proj=longlat +ellps=WGS84"))
sat <- read.table("ch2/state.sat.data_mod.txt", row.names = 5, header = TRUE)
str(sat)
id <- match(row.names(sat), row.names(state.sp))
row.names(sat)[is.na(id)]
sat1 <- sat[!is.na(id),]
state.spdf <- SpatialPolygonsDataFrame(state.sp, sat1)
str(slot(state.spdf, "data"))
str(state.spdf, max.level=2)
## error signaled if row names don't match
rownames(sat1)[2] <- "foobar"
SpatialPolygonsDataFrame(state.sp, sat1)
rownames(sat1)[2] <- "arizona"
SpatialPolygonsDataFrame(state.sp, sat1)
DC <- "district of columbia"
not_dc <- !(row.names(state.spdf)==DC)
state.spdf1 <- state.spdf[not_dc,]
dim(state.spdf1)
summary(state.spdf1)
## 2.6.2 Holes and Ring Direction
## clockwise (ring is not hole); counter clockwise (ring is hole)
library(rgeos)
manitoulin_sp <- createSPComment(manitoulin_sp)
length(slot(manitoulin_sp, "polygons"))
## 2.8 Raster Objects and the raster Package
library(raster)
r <- raster("ch2/70042108.tif")
class(r)
inMemory(r)
object.size(r)
cellStats(r, max)
cellStats(r, min)
inMemory(r)
## remove vals <= 0, since only care abt land elevation
out <- raster(r)
bs <- blockSize(out)
out <- writeStart(out, filename = tempfile(), overwrite = TRUE)
for (i in 1:bs$n) {
v <- getValues(r, row = bs$row[i], nrows = bs$nrows[i])
v[v <= 0] <- NA
writeValues(out, v, bs$row[i])
}
out <- writeStop(out)
cellStats(out, min)
cellStats(out,max)
inMemory(out)
plot(out, col = terrain.colors(100))
r1 <- as(out, "SpatialGridDataFrame")
summary(r1)
## Chaper 3 -- Visualizing Spatial Data
## traditional - allows incremental addition to plots
## grid - does not allow incremental addition
## 3.1 The Traditional Plotting System
## 3.1.1 Plotting Points, Lines, Polygons, and Grids
library(sp)
data(meuse)
coordinates(meuse) <- c("x", "y") ## transforms df to SpatialPointsDataFrame
head(meuse)
plot(meuse)
title("points")
cc <- coordinates(meuse)
cc
m.s1 <- SpatialLines(list(Lines(list(Line(cc)),"line1")))
plot(m.s1)
title("ines")
data(meuse.riv)
meuse.lst <- list(Polygons(list(Polygon(meuse.riv)),"meuse.riv"))
meuse.pol <- SpatialPolygons(meuse.lst)
plot(meuse.pol, col="grey")
title("polygons")
data(meuse.grid)
class(meuse.grid)
coordinates(meuse.grid) <- c("x", "y")
meuse.grid <- as(meuse.grid, "SpatialPixels")
image(meuse.grid, col="grey")
title("grid")
image(meuse.grid, col = "lightgrey")
plot(meuse.pol, col="grey", add = TRUE)
# lines(meuse.pol, col="red") ## alt to above, adds automatically
plot(meuse, add = TRUE)
## 3.1.2 Axes & Layout Elements
layout(matrix(c(1,2),1,2))
plot(meuse.pol, axes = TRUE)
plot(meuse.pol, axes = FALSE)
axis(1, at = c(178000 + 0:2 * 2000), cex.axis=0.7)
axis(2, at = c(326000 + 0:3 * 4000), cex.axis=0.7)
box()
oldpar <- par(no.readonly = TRUE)
layout(matrix(c(1,2),1,2))
plot(meuse, axes = TRUE, cex = 0.6)
plot(meuse.pol, add = T)
title("Sample locations")
par(mar = c(0,0,0,0) + 0.1)
plot(meuse, axes = FALSE, cex = 0.6)
plot(meuse.pol, add = T)
box()
par(oldpar)
# par(mfrow=c(1,1))
# plot(meuse)
# plot(meuse.pol, add = T)
# plot(meuse)
# SpatialPolygonsRescale(layout.scale.bar(),
#                        offset = locator(1),
#                        scale = 1000,
#                        fill = c("transparent", "black"),
#                        plot.grid = F)
# text(locator(1),"0") ## need to click on plot
# text(locator(1),"1 km")
# SpatialPolygonsRescale(layout.north.arrow(),
#                        offset=locator(1),
#                        scale=400,
#                        plot.grid=FALSE)
## 3.1.3 Degree in Axes Labels & Reference Grid
library(maptools)
library(maps)
wrld <- map("world",
interior = FALSE,
xlim = c(-179, 179),
ylim=c(-89, 89),
plot = FALSE)
wrld_p <- pruneMap(wrld, xlim = c(-179, 179))
llCRS <- CRS("+proj=longlat + ellpsWGS84")
wrld_sp <- map2SpatialLines(wrld_p, proj4string=llCRS)
prj_new <- CRS("+proj=moll")
library(rgdal)
wrld_proj <- spTransform(wrld_sp, prj_new)
wrld_grid <- gridlines(wrld_sp, easts = c(-179, seq(-150, 150, 50), 179.5), norths = seq(-75, 75, 15), ndiscr = 100)
wrld_grid_proj <- spTransform(wrld_grid, prj_new)
at_sp <- gridat(wrld_sp, easts = 0, norths = seq(-75, 75, 15), offset = 0.3)
at_proj <- spTransform(at_sp, prj_new)
plot(wrld_proj, col="grey60")
plot(wrld_grid_proj, add = T, lty = 3, col="grey70")
text(coordinates(at_proj), pos = at_proj$pos, offset = at_proj$offset, labels = parse(text=as.character(at_proj$labels)), cex=0.6)
## 3.1.4 Plot Size, Plotting Area, Map Scale, & Multiple Plots
par("pin") ## total size of figure
par(pin = c(4,4))
##dev.off() ## turn off plotting
##windows(width=10, height = 10) ## X11() <- unix; quartz() <- mac
pdf("file.pdf", width = 5, height = 7)
pin <- par("pin")
dxy <- apply(bbox(meuse), 1, diff)
ratio <- dxy[1]/dxy[2]
par(pin=c(ratio*pin[2],pin[2]), xaxs = "i", yaxs = "i")
plot(meuse, pch = 1)
box()
pin <- par("pin")
dxy <- apply(bbox(meuse), 1, diff)
ratio <- dxy[1]/dxy[2]
par(pin=c(ratio*pin[2],pin[2]), xaxs = "i", yaxs = "i")
plot(meuse, pch = 1)
box()
plot(meuse, pch = 2)
box()
plot(meuse, pch = 3)
box()
par(mfrow=c(2,3))
R.version
R.version
library(spatstat)
data(japanesepines)
summary(japanesepines)
class(japanesepines)
library(maptools) ## convert between ppp objects & SpatialPoints
spjpines <- as(japanesepines, "SpatialPoints")
summary(spjpines) ## use actual units
class(spjpines)
spjpines1 <- elide(spjpines, scale=TRUE, unitsq=TRUE) ## cnvrt to unit square
summary(spjpines1)
class(spjpines1)
## can also coerce back to ppp
pppjap <- as(spjpines1, "ppp")
summary(pppjap)
data(redwoodfull)
spred <- as(redwoodfull, "SpatialPoints")
data(cells)
spcells <- as(cells, "SpatialPoints")
dpp<-data.frame(rbind(coordinates(spjpines1), coordinates(spred),
coordinates(spcells)))
njap<-nrow(coordinates(spjpines1))
nred<-nrow(coordinates(spred))
ncells<-nrow(coordinates(spcells))
dpp<-cbind(dpp,c(rep("JAPANESE",njap), rep("REDWOOD", nred), rep("CELLS", ncells)))
names(dpp)<-c("x", "y", "DATASET")
library(lattice)
print(xyplot(y~x|DATASET, data=dpp, pch=19, aspect=1))
library(rgdal)
spasthma <- readOGR("ch7/.", "spasthma") ## ASTHMA CASES
spbdry <- readOGR("ch7/.", "spbdry") ## BOUNDARY OF AREA
spsrc <- readOGR("ch7/.", "spsrc") ## POLLUTION SOURCE
sproads <- readOGR("ch7/.", "sproads") ## ROADS IN AREA
plot(spbdry, axes=TRUE, lwd=0.5)
plot(sproads, add=TRUE, lwd=2, col="darkslategrey")
## cases = 2; controls = 1
c_c <- (spasthma$Asthma == "case") + 1
plot(spasthma[c_c == 1,], add=TRUE, pch=4, cex=0.6, col="mediumaquamarine")
plot(spasthma[c_c == 2,], add=TRUE, pch=17, cex=0.75, col="goldenrod2")
plot(spsrc, pch=22, add=TRUE, cex=1.2, bg="brown4")
legend("upperright", legend=c("controls", "cases", "pollution sources"), pch=c(4, 17, 22), pt.cex=c(0.6, 0.75, 1.2), pt.bg=c(NA, NA, "brown4"), col=c("mediumaquamarine", "goldenrod2", "black"), bty="n")
legend("topright", legend=c("controls", "cases", "pollution sources"), pch=c(4, 17, 22), pt.cex=c(0.6, 0.75, 1.2), pt.bg=c(NA, NA, "brown4"), col=c("mediumaquamarine", "goldenrod2", "black"), bty="n")
set.seed(120109)
r <- seq(0, sqrt(2)/6, by = 0.005)
r
envjap <- envelope(as(spjpines1, "ppp"), fun = Gest, r = r, nrank = 2, nsim=99)
envred <- envelope(as(spred, "ppp"), fun = Gest, r = r, nrank = 2, nsim = 99)
envcells <- envelope(as(spcells, "ppp"), fun=Gest, r=r, nrank=2, nsim=99)
Gresults <- rbind(envjap, envred, envcells)
Gresults <- cbind(Gresults,
y=rep(c("JAPANESE", "REDWOOD", "CELLS"), each=length(r)))
print(xyplot(obs~theo|y , data=Gresults, type="l",
xlab = "theoretical", ylab = "observed",
panel=function(x, y, subscripts) {
lpolygon(c(x, rev(x)),
c(Gresults$lo[subscripts], rev(Gresults$hi[subscripts])),
border="gray", col="gray"
)
llines(x, y, col="black", lwd=2)
}))
set.seed(30)
Fenvjap<-envelope(as(spjpines1, "ppp"), fun=Fest, r=r, nrank=2, nsim=99)
set.seed(30)
Fenvjap<-envelope(as(spjpines1, "ppp"), fun=Fest, r=r, nrank=2, nsim=99)
r <- seq(0, sqrt(2)/6, by = 0.001)
Fenvjap<-envelope(as(spjpines1, "ppp"), fun=Fest, r=r, nrank=2, nsim=99)
Fenvred<-envelope(as(spred, "ppp"), fun=Fest, r=r, nrank=2, nsim=99)
Fenvcells<-envelope(as(spcells, "ppp"), fun=Fest, r=r, nrank=2, nsim=99)
Fresults<-rbind(Fenvjap, Fenvred, Fenvcells)
Fresults<-cbind(Fresults,
y=rep(c("JAPANESE", "REDWOOD", "CELLS"), each=length(r)))
print(xyplot(obs~theo|y , data=Fresults, type="l",
xlab = "theoretical", ylab = "observed",
panel=function(x, y, subscripts) {
lpolygon(c(x, rev(x)),
c(Fresults$lo[subscripts], rev(Fresults$hi[subscripts])),
border="gray", col="gray"
)
llines(x, y, col="black", lwd=2)
}))
